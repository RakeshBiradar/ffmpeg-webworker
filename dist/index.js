!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e=e||self).ffmpegWebworker={})}(this,function(e){"use strict";var t="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}();return function(){var e,t=i(n);return e=r?(e=i(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments),t=this,!(e=e)||"object"!=typeof e&&"function"!=typeof e?a(t):e}}function c(){importScripts("https://cdn.rawgit.com/bgrins/videoconverter.js/master/build/ffmpeg-all-codecs.js");var n=Date.now;function r(e){postMessage({type:"stdout",data:e})}onmessage=function(e){var t=e.data;"command"===t.type&&(e={print:r,printErr:r,files:t.files||[],arguments:t.arguments||[],TOTAL_MEMORY:t.totalMemory||33554432},postMessage({type:"start",data:e.arguments.join(" ")}),postMessage({type:"stdout",data:"Received command: "+e.arguments.join(" ")+(e.TOTAL_MEMORY?".  Processing with "+e.TOTAL_MEMORY+" bits.":"")}),t=n(),e=ffmpeg_run(e),t=n()-t,postMessage({type:"stdout",data:"Finished processing (took "+t+"ms)"}),postMessage({type:"done",data:e,time:t}))},postMessage({type:"ready"})}var n,r,l=(function(e){(e=e).default=function t(e){if(function(e){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this),"function"!=typeof e)throw new Error("File content must export a function");e=e.toString(),e=new Blob(["("+e+")()"],{type:"application/javascript"});return new Worker(URL.createObjectURL(e))},Object.defineProperty(e,"__esModule",{value:!0})}((n={exports:{}},n.exports)),n.exports),p=(r=l)&&r.__esModule&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r;function h(){}function d(){d.init.call(this)}function y(e){return void 0===e._maxListeners?d.defaultMaxListeners:e._maxListeners}function v(e,t,n,r){var i,o;if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');return(i=e._events)?(i.newListener&&(e.emit("newListener",t,n.listener||n),i=e._events),o=i[t]):(i=e._events=new h,e._eventsCount=0),o?("function"==typeof o?o=i[t]=r?[n,o]:[o,n]:r?o.unshift(n):o.push(n),o.warned||(r=y(e))&&0<r&&o.length>r&&(o.warned=!0,(r=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+t+" listeners added. Use emitter.setMaxListeners() to increase limit")).name="MaxListenersExceededWarning",r.emitter=e,r.type=t,r.count=o.length,r=r,"function"==typeof console.warn?console.warn(r):console.log(r))):(o=i[t]=n,++e._eventsCount),e}function m(e,t,n){var r=!1;function i(){e.removeListener(t,i),r||(r=!0,n.apply(e,arguments))}return i.listener=n,i}function w(e){var t=this._events;if(t){e=t[e];if("function"==typeof e)return 1;if(e)return e.length}return 0}function g(e,t){for(var n=new Array(t);t--;)n[t]=e[t];return n}h.prototype=Object.create(null),(d.EventEmitter=d).usingDomains=!1,d.prototype.domain=void 0,d.prototype._events=void 0,d.prototype._maxListeners=void 0,d.defaultMaxListeners=10,d.init=function(){this.domain=null,d.usingDomains&&(void 0).active,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new h,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},d.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},d.prototype.getMaxListeners=function(){return y(this)},d.prototype.emit=function(e){var t,n,r,i="error"===e,o=this._events;if(o)i=i&&null==o.error;else if(!i)return!1;if(s=this.domain,i){if(i=arguments[1],s)return(i=i||new Error('Uncaught, unspecified "error" event')).domainEmitter=this,i.domain=s,i.domainThrown=!1,s.emit("error",i),!1;if(i instanceof Error)throw i;var s=new Error('Uncaught, unspecified "error" event. ('+i+")");throw s.context=i,s}if(!(t=o[e]))return!1;var u,a="function"==typeof t;switch(u=arguments.length){case 1:!function(e,t){if(a)e.call(t);else for(var n=e.length,r=g(e,n),i=0;i<n;++i)r[i].call(t)}(t,this);break;case 2:!function(e,t,n,r){if(t)e.call(n,r);else for(var i=e.length,o=g(e,i),s=0;s<i;++s)o[s].call(n,r)}(t,a,this,arguments[1]);break;case 3:!function(e,t,n,r,i){if(t)e.call(n,r,i);else for(var o=e.length,s=g(e,o),u=0;u<o;++u)s[u].call(n,r,i)}(t,a,this,arguments[1],arguments[2]);break;case 4:!function(e,t,n,r,i,o){if(t)e.call(n,r,i,o);else for(var s=e.length,u=g(e,s),a=0;a<s;++a)u[a].call(n,r,i,o)}(t,a,this,arguments[1],arguments[2],arguments[3]);break;default:for(n=new Array(u-1),r=1;r<u;r++)n[r-1]=arguments[r];!function(e,t,n){if(a)e.apply(t,n);else for(var r=e.length,i=g(e,r),o=0;o<r;++o)i[o].apply(t,n)}(t,this,n)}return!0},d.prototype.addListener=function(e,t){return v(this,e,t,!1)},d.prototype.on=d.prototype.addListener,d.prototype.prependListener=function(e,t){return v(this,e,t,!0)},d.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,m(this,e,t)),this},d.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,m(this,e,t)),this},d.prototype.removeListener=function(e,t){var n,r,i,o,s;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(r=this._events))return this;if(!(n=r[e]))return this;if(n===t||n.listener&&n.listener===t)0==--this._eventsCount?this._events=new h:(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,o=n.length;0<o--;)if(n[o]===t||n[o].listener&&n[o].listener===t){s=n[o].listener,i=o;break}if(i<0)return this;if(1===n.length){if(n[0]=void 0,0==--this._eventsCount)return this._events=new h,this;delete r[e]}else!function(e){for(var t=i,n=t+1,r=e.length;n<r;t+=1,n+=1)e[t]=e[n];e.pop()}(n);r.removeListener&&this.emit("removeListener",e,s||t)}return this},d.prototype.removeAllListeners=function(e){var t,n=this._events;if(!n)return this;if(!n.removeListener)return 0===arguments.length?(this._events=new h,this._eventsCount=0):n[e]&&(0==--this._eventsCount?this._events=new h:delete n[e]),this;if(0===arguments.length){for(var r,i=Object.keys(n),o=0;o<i.length;++o)"removeListener"!==(r=i[o])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=new h,this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(t)for(;this.removeListener(e,t[t.length-1]),t[0];);return this},d.prototype.listeners=function(e){var t=this._events,n=t&&(n=t[e])?"function"==typeof n?[n.listener||n]:function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(n):[];return n},d.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):w.call(e,t)},d.prototype.listenerCount=w,d.prototype.eventNames=function(){return 0<this._eventsCount?Reflect.ownKeys(this._events):[]};var b=function(){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(i,d);var e,t,n,r=f(i);function i(){var s;return function(e){if(!(e instanceof i))throw new TypeError("Cannot call a class as a function")}(this),u(a(s=r.call(this)),"_worker",{}),u(a(s),"_inputFile",{}),u(a(s),"workerIsReady",!1),u(a(s),"readFileAsBufferArray",function(r){return new Promise(function(e,t){var n=new FileReader;n.onload=function(){e(this.result)},n.onerror=function(){t(this.error)},n.readAsArrayBuffer(r)})}),u(a(s),"runCommand",function(r,i){var o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:33554432;if("string"!=typeof r||"string"!=typeof i)throw new Error("command should be string and not empty");s.inputFile&&s.inputFile.type?s.convertInputFileToArrayBuffer().then(function(e){for(;!s.workerIsReady;);var t="video-".concat(Date.now(),".webm"),n="".concat(r," -i ").concat(t," ").concat(i);s.worker.postMessage({type:"command",arguments:n.split(" "),files:[{data:new Uint8Array(e),name:t}],totalMemory:o})}):s.worker.postMessage({type:"command",arguments:command.split(" "),totalMemory:o})}),u(a(s),"log",function(e){return Array.isArray(e)?console.log.call(null,e):console.log(e)}),u(a(s),"isVideo",function(e){var t=e.type;return e instanceof Blob&&(t.includes("video")||t.includes("audio"))}),s.initWebWorker(),s}return e=i,(t=[{key:"initWebWorker",value:function(){var n=this;this.worker=new p(c),this.log;var r=this.worker.onmessage=function(e){var t=e.data;e&&e.type&&("ready"==t.type?(n.emit("onReady","ffmpeg-asm.js file has been loaded."),n.workerIsReady=!0):"stdout"==t.type?n.emit("onStdout",t.data):"start"==t.type?(n.emit("onFileReceived","File Received"),r("file received ffmpeg command.")):"done"==t.type&&n.emit("onDone",t.data))}}},{key:"inputFileExists",value:function(){var e=this.inputFile;return!!(e&&e instanceof Blob&&e.size&&e.type)}},{key:"convertInputFileToArrayBuffer",value:function(){if(!this.inputFileExists())throw new Error("Input File has not been set");return this.readFileAsBufferArray(this.inputFile)}},{key:"worker",set:function(e){this._worker=e},get:function(){return this._worker}},{key:"inputFile",set:function(e){if(!this.isVideo(e))throw new Error("Input file is expected to be an audio or a video");this._inputFile=e},get:function(){return this._inputFile}}])&&o(e.prototype,t),n&&o(e,n),i}(),_=c,L=b,k={on:function(){},emit:function(){}},t=t||window;t&&t.Blob&&(k=new b);e.FFMPEGWebworker=_,e.FFMPEGWebworkerClient=L,e.default=k,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
